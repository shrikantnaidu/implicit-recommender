"""Dataset loading and preprocessing utilities."""
import os
from typing import Dict, Tuple, Any

import numpy as np
import pandas as pd
from scipy.sparse import csr_matrix


def load_movielens_sample(data_dir: str = "data") -> Tuple[csr_matrix, pd.DataFrame, pd.DataFrame, Dict[int, int], Dict[int, int]]:
    """Load the MovieLens sample dataset.
    
    Args:
        data_dir: Directory containing the dataset files
        
    Returns:
        A tuple containing:
            - interaction_matrix: Sparse matrix of user-item interactions
            - movies_df: DataFrame containing movie information
            - ratings_df: DataFrame containing rating information
            - idx_to_user: Mapping from user index to user ID
            - idx_to_movie: Mapping from movie index to movie ID
    """
    # Create data directory if it doesn't exist
    os.makedirs(data_dir, exist_ok=True)
    
    # Download the dataset if it doesn't exist
    ratings_path = os.path.join(data_dir, "ratings.csv")
    movies_path = os.path.join(data_dir, "movies.csv")
    
    if not os.path.exists(ratings_path) or not os.path.exists(movies_path):
        import urllib.request
        import zipfile
        import shutil
        
        print("Downloading MovieLens dataset...")
        url = "https://files.grouplens.org/datasets/movielens/ml-latest-small.zip"
        zip_path = os.path.join(data_dir, "ml-latest-small.zip")
        urllib.request.urlretrieve(url, zip_path)
        
        print("Extracting dataset...")
        with zipfile.ZipFile(zip_path, 'r') as zip_ref:
            zip_ref.extractall(data_dir)
        
        # Move files to data directory
        src_dir = os.path.join(data_dir, "ml-latest-small")
        for file in ["ratings.csv", "movies.csv"]:
            src_file = os.path.join(src_dir, file)
            if os.path.exists(src_file):
                shutil.move(src_file, data_dir)
        
        # Clean up
        if os.path.exists(src_dir):
            shutil.rmtree(src_dir)
        if os.path.exists(zip_path):
            os.remove(zip_path)
    
    # Load data
    ratings_df = pd.read_csv(ratings_path)
    movies_df = pd.read_csv(movies_path)
    
    # Create user and item mappings
    user_ids = {user_id: idx for idx, user_id in enumerate(ratings_df['userId'].unique())}
    movie_ids = {movie_id: idx for idx, movie_id in enumerate(ratings_df['movieId'].unique())}
    
    # Create reverse mappings
    idx_to_user = {idx: user_id for user_id, idx in user_ids.items()}
    idx_to_movie = {idx: movie_id for movie_id, idx in movie_ids.items()}
    
    # Create interaction matrix (implicit feedback: 1 if user rated the movie, 0 otherwise)
    rows = [user_ids[user_id] for user_id in ratings_df['userId']]
    cols = [movie_ids[movie_id] for movie_id in ratings_df['movieId']]
    values = [1] * len(rows)  # Binary feedback
    
    interaction_matrix = csr_matrix(
        (values, (rows, cols)),
        shape=(len(user_ids), len(movie_ids)),
        dtype=np.float32
    )
    
    return interaction_matrix, movies_df, ratings_df, idx_to_user, idx_to_movie
